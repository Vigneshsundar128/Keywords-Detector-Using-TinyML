/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 29.11.2020 08:25:25

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 6176;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[67];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[33];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045173682272434235, } };
const TfArray<1, int> quant0_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 16, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[50] = { 21, -46, -62, -19, -100, -2, -80, -116, -99, -57, 24, -127, -68, -17, -19, -68, -66, 2, -54, -110, -62, -84, -3, -88, -54, -54, -80, -89, -23, -93, -117, -105, -32, -46, 20, -28, -49, -87, -81, -27, -42, -108, 45, -17, -60, -28, -16, -89, -45, -92, };
const TfArray<1, int> tensor_dimension2 = { 1, { 50 } };
const TfArray<1, float> quant2_scale = { 1, { 0.017978457733988762, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[5] = { -359, 783, 247, 32, -690, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0029106319416314363, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[30] = { -13, 83, -8, -66, 37, -10, 61, 127, 9, -30, 8, -9, -18, -50, -31, -34, -20, -28, -72, 61, -10, -3, 18, -82, -7, 32, -10, 39, 76, 51, };
const TfArray<1, int> tensor_dimension4 = { 1, { 30 } };
const TfArray<1, float> quant4_scale = { 1, { 0.011967077851295471, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[20] = { 105, 52, 44, -107, 17, -123, -60, -28, 50, -26, -40, 70, -110, -46, 116, 33, -72, 44, -8, 127, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.01670188270509243, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[16] = { -69, 5, -12, -85, -82, -70, 45, 78, 6, -2, -64, -96, -71, -50, -127, -22, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<1, float> quant6_scale = { 1, { 0.011129689402878284, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8] = { 31, 8, 107, 35, 127, 60, 25, -10, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0068119615316390991, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[5*16] = { 
  68, -39, 65, 12, 37, 3, 73, 9, -25, -31, 63, 78, -17, 49, 47, 14, 
  31, -22, 14, 3, 123, -52, -16, -3, -50, -59, 56, 46, 57, 10, 1, -15, 
  21, 41, -60, 98, 18, -89, 55, 0, -66, 17, 17, 99, 33, -16, 36, -1, 
  75, 35, -81, 82, 4, -117, 1, 46, -6, 8, 44, 85, -61, -13, -5, 40, 
  35, 39, 74, -71, 127, 4, 25, 39, -75, -62, 77, 79, 69, 39, 13, 42, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 5,16 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0042069056071341038, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[50] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension9 = { 1, { 50 } };
const TfArray<50, float> quant9_scale = { 50, { 0.001086367410607636, 0.00044181122211739421, 0.00030672125285491347, 0.00082431064220145345, 0.0005191597156226635, 0.00069343758514150977, 0.00033933707163669169, 0.00023685691121499985, 0.00029476435156539083, 0.00054461904801428318, 0.00073153787525370717, 0.00027421247796155512, 0.00038375670555979013, 0.00054155441466718912, 0.00044390704715624452, 0.00041144844726659358, 0.0004578304651658982, 0.00049836363177746534, 0.00040837962296791375, 0.00030619339668191969, 0.00047423367504961789, 0.00029142660787329078, 0.00047315121628344059, 0.00029949238523840904, 0.00049906986532732844, 0.00034125556703656912, 0.00025244316202588379, 0.00032075945637188852, 0.0007136535132303834, 0.00030310967122204602, 0.00029922279645688832, 0.0003510712122078985, 0.00035349081736057997, 0.00036882265703752637, 0.00058133999118581414, 0.00037933193380013108, 0.00027191327535547316, 0.00041585208964534104, 0.0003770778130274266, 0.00033221166813746095, 0.00065942609217017889, 0.00029798567993566394, 0.00055087433429434896, 0.00060573755763471127, 0.00044373376294970512, 0.00069510703906416893, 0.00068263750290498137, 0.00033924251329153776, 0.00033219277975149453, 0.00030300312209874392, } };
const TfArray<50, int> quant9_zero = { 50, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[50*1*3*13] = { 
  /* [0][0][][] */ -127,-7,-11,7,-13,-6,3,-9,-6,4,-16,-5,-7, -36,24,7,-11,14,12,-3,-3,7,15,18,10,15, 48,-19,-26,-17,20,-2,-8,-1,-3,6,16,12,-19, 
  /* [1][0][][] */ -41,5,-54,-11,54,43,5,45,63,-34,6,-80,55, -42,127,-12,-69,53,23,8,-30,-44,44,26,13,-12, -87,47,-67,-51,84,26,-31,0,9,23,-24,-15,-4, 
  /* [2][0][][] */ -127,77,7,68,65,-74,-100,45,-24,36,-37,7,-23, -115,60,61,19,-26,33,-89,52,-61,-5,7,42,-14, -45,15,108,48,-102,5,-70,-32,-51,38,-7,4,37, 
  /* [3][0][][] */ -127,25,-9,7,6,-13,-10,9,-15,21,12,27,-12, -90,28,-65,-3,31,6,16,-12,-50,-2,13,10,9, 37,-20,13,6,-2,-16,12,-2,7,3,3,-2,15, 
  /* [4][0][][] */ -7,-30,-10,-7,48,-79,13,5,-3,7,41,-36,26, -21,-38,3,-32,47,-80,-51,61,12,-78,-26,-3,27, -13,-14,28,-127,0,-7,-75,36,26,-15,-35,-4,46, 
  /* [5][0][][] */ 1,14,-27,29,-40,-52,1,2,-14,4,-17,-34,5, -67,33,-23,15,-28,8,3,36,-21,-13,5,12,-13, -127,51,-11,60,-15,24,45,-4,5,32,-4,-30,12, 
  /* [6][0][][] */ 2,-16,-25,10,-25,-18,12,10,-80,40,-61,44,-39, -16,18,-18,44,-11,32,31,-71,-20,3,-127,79,-13, -51,23,-15,82,-16,40,-71,-72,-22,90,-120,88,-26, 
  /* [7][0][][] */ -35,112,54,-4,80,5,14,-55,-26,3,-58,-5,-30, 4,13,93,-48,-1,-79,-85,-127,-106,98,-57,72,-11, 4,-19,33,-29,-2,-49,-89,-58,-33,34,-88,1,85, 
  /* [8][0][][] */ -47,55,-101,-70,4,117,30,-96,46,-47,9,-39,71, -2,53,8,-66,-35,124,44,-56,47,38,8,-54,25, -38,84,97,-54,7,24,-28,-45,-14,-58,127,34,-52, 
  /* [9][0][][] */ -1,57,-127,-94,45,9,-40,14,42,-24,-22,-18,-14, -29,11,-11,-58,62,-17,31,0,-32,1,-20,-1,-34, -12,-5,61,-32,10,-15,-27,38,-42,10,5,43,-35, 
  /* [10][0][][] */ -98,-42,34,28,20,-1,9,9,-22,14,16,1,-9, -67,-28,-34,9,6,-26,-31,-8,30,-15,-50,15,-20, -127,-43,-72,25,-4,-23,-10,-25,19,21,32,9,17, 
  /* [11][0][][] */ 22,18,12,-126,92,0,-89,76,-21,-88,127,-46,-8, 4,37,82,-91,-32,52,-110,9,24,-59,57,75,-18, -29,49,-23,-53,-24,94,-77,-56,4,-58,48,14,65, 
  /* [12][0][][] */ 61,27,47,5,-10,35,-23,-39,27,70,-60,-83,23, 9,-37,5,15,61,-22,-15,-37,-52,25,-16,-5,41, 58,-63,-42,26,72,-98,-42,44,10,-127,50,-9,-45, 
  /* [13][0][][] */ 5,-12,-45,-20,45,-6,12,21,-13,48,60,8,-78, -9,-27,20,-47,1,-19,-13,-31,10,-22,-36,13,18, 61,-127,24,-27,12,-42,22,-3,-5,5,47,-6,10, 
  /* [14][0][][] */ -50,-15,-3,16,24,33,13,-11,-36,0,39,39,-19, -7,-127,-2,-84,-24,55,50,-24,-33,-26,-27,3,32, -4,61,101,82,87,-13,-38,-44,70,-43,26,-11,-25, 
  /* [15][0][][] */ -124,96,10,60,41,47,28,-25,56,-20,27,3,9, -14,127,47,15,11,16,-1,-17,-20,24,17,38,9, 21,6,85,-27,37,44,-65,21,-75,4,27,-41,-2, 
  /* [16][0][][] */ -54,11,48,32,-42,7,-127,55,-22,-55,75,-28,-17, -50,-4,26,3,29,-43,42,-7,-38,7,20,-41,-9, -25,-51,-23,14,-13,1,43,-38,-3,56,-3,66,-24, 
  /* [17][0][][] */ -57,-127,0,20,-11,-38,34,-25,14,11,6,-25,50, -74,-40,67,-87,2,-44,-14,-32,36,-1,24,66,6, -28,-40,34,53,57,5,4,29,13,50,41,-51,-37, 
  /* [18][0][][] */ -107,-60,23,0,-74,21,75,1,-25,-34,22,39,20, -44,-37,-40,-23,-23,54,127,-13,-74,34,0,-51,-10, -30,-19,-46,33,33,-8,87,-9,-97,6,6,-41,27, 
  /* [19][0][][] */ 29,17,14,-47,-12,-38,-127,49,16,52,-13,-45,-48, -39,33,20,-126,9,3,-22,-10,37,-36,51,-42,-95, -59,101,-65,13,-4,123,39,7,21,-12,-9,-35,92, 
  /* [20][0][][] */ 24,-36,-88,-10,-4,21,33,-14,-60,-4,17,-12,-35, 95,-17,-21,-4,38,15,17,19,-26,20,6,22,-7, 127,42,-29,-101,29,-13,28,6,-3,-2,23,-26,4, 
  /* [21][0][][] */ -65,46,-24,57,-41,-16,-95,53,2,-43,-74,22,37, -49,46,39,46,-23,93,45,-5,28,-57,77,-8,21, -41,70,-38,87,-58,33,38,72,0,-62,127,21,42, 
  /* [22][0][][] */ -43,-65,-6,11,-14,-7,-14,-12,-7,-44,-5,20,9, 23,-127,-67,18,67,3,-46,-53,-71,37,15,-17,-16, -99,-79,-29,49,36,-17,12,-2,65,-18,22,-6,0, 
  /* [23][0][][] */ -12,-41,-71,-26,-34,-43,120,-54,-116,65,71,35,42, -60,-30,-106,6,-53,-2,87,-23,-111,117,-27,27,12, -127,35,36,-51,-55,85,35,-72,-77,81,24,-10,89, 
  /* [24][0][][] */ 5,39,-119,-79,127,28,-59,14,8,2,-27,-13,29, 8,24,-70,-34,-1,36,41,-41,-59,-22,13,3,-34, -14,5,28,-20,2,-39,28,57,-13,47,26,13,-14, 
  /* [25][0][][] */ -34,93,0,23,47,127,-93,-25,126,-92,35,-8,-4, -21,-12,1,6,57,-45,-38,-5,4,-36,95,-55,66, -27,-73,-30,18,45,-108,50,69,-45,45,-45,-77,56, 
  /* [26][0][][] */ -5,7,-47,114,-52,23,-5,-98,37,-8,-30,32,20, -10,30,-19,60,-50,47,0,-125,-84,66,15,-20,44, -28,72,-84,60,7,-24,104,24,-75,30,126,-127,28, 
  /* [27][0][][] */ 86,-35,-127,35,12,-49,-85,73,-8,-18,-59,36,43, 63,-19,-85,-6,-21,-32,34,-18,28,-47,-14,58,85, 30,97,3,-80,-83,-5,39,-10,19,-12,21,-104,-76, 
  /* [28][0][][] */ -13,0,-11,-59,-18,-24,-26,-9,-1,33,-9,3,1, -103,43,33,9,20,22,18,13,-2,6,33,15,-33, -127,-31,-55,-35,37,10,-31,-22,10,0,-13,-38,-2, 
  /* [29][0][][] */ 39,1,-92,36,27,-127,-8,101,-3,-55,-47,45,35, -6,-46,-85,-12,73,-87,-61,25,53,-96,-47,63,10, 19,-38,-45,-54,47,-26,-56,9,60,4,-89,27,105, 
  /* [30][0][][] */ -127,106,32,-48,117,-32,47,-68,16,2,97,56,-28, -18,22,122,-81,80,10,-45,0,-51,15,-7,63,-44, -3,-8,123,-90,-47,-27,-77,-12,-24,5,-22,59,10, 
  /* [31][0][][] */ 34,-60,127,55,27,78,-32,-10,-32,-7,-30,16,13, 11,-19,74,-35,-104,-23,-61,-65,42,14,-45,13,19, -44,-53,-53,-94,-56,9,-32,13,39,-38,36,17,21, 
  /* [32][0][][] */ -89,-79,-40,-24,67,104,98,27,44,-23,41,-5,16, -127,-32,-21,58,62,10,-79,-2,47,-40,36,-21,58, 13,127,-63,-109,16,40,-20,25,5,105,-83,13,36, 
  /* [33][0][][] */ 1,-27,-82,-73,65,87,1,80,9,-52,29,-62,-23, 26,12,-127,-35,31,16,-53,-96,2,42,-12,-17,6, -2,58,-81,-76,47,87,-55,31,17,56,33,-7,-40, 
  /* [34][0][][] */ -117,-31,55,22,16,38,8,25,11,-4,-14,15,-32, -127,13,-51,-42,-46,-16,7,9,-23,-69,8,26,-3, -75,7,-54,-41,43,-13,-52,21,-29,18,-36,-31,-41, 
  /* [35][0][][] */ 127,43,-28,-18,18,41,18,15,-13,42,-1,-10,53, 76,-64,-42,-51,22,-58,-1,37,-23,-35,-25,56,-8, 66,-117,29,-60,15,1,35,-35,26,12,-9,-29,-22, 
  /* [36][0][][] */ 82,11,-66,18,5,-17,18,70,26,-26,0,-54,-1, 6,-71,-19,115,34,-43,37,117,-121,-14,85,-12,1, -18,-14,24,94,-104,-91,25,127,-55,-24,48,64,62, 
  /* [37][0][][] */ -71,-83,73,-127,1,-53,-30,60,64,39,57,-19,-13, -43,27,24,-49,-29,9,46,12,-51,-73,-5,36,-36, -24,-78,-90,41,-2,65,-62,-45,20,-38,-32,9,-8, 
  /* [38][0][][] */ 45,-22,-48,-33,7,36,-44,32,-44,22,49,-4,1, 73,-43,-86,-17,-9,-48,13,-35,-14,-99,-53,-19,-3, 127,38,3,-70,13,-23,93,42,-12,52,15,-11,21, 
  /* [39][0][][] */ -79,55,-31,-25,42,5,23,-23,-23,36,11,8,-44, -13,-84,21,-78,2,-12,38,36,-6,32,21,-89,43, 23,-118,53,-28,127,-10,70,-22,41,-16,-42,-59,-9, 
  /* [40][0][][] */ -127,42,-54,-61,-36,6,9,-8,2,18,45,8,-10, 14,28,-3,4,6,-5,-11,-1,-34,-17,1,-7,-24, 54,-97,22,36,68,18,19,-11,17,-9,-20,-10,-10, 
  /* [41][0][][] */ -54,-46,115,-61,-42,-78,-127,-62,63,82,-33,45,20, -45,-21,53,-11,-61,-53,-13,33,26,91,6,0,11, -95,77,-57,-39,-75,2,21,91,41,-61,-28,-3,-64, 
  /* [42][0][][] */ -127,-34,47,25,11,-35,4,22,-19,17,20,16,-40, -119,-48,60,24,-11,-12,49,26,16,-27,37,13,2, -89,-62,-105,-40,23,20,-57,-40,3,5,-3,-10,-27, 
  /* [43][0][][] */ -57,-43,49,-8,-32,-15,-4,-12,9,-29,-14,17,37, -33,-86,-94,-73,-23,15,7,-8,-16,-28,50,-29,-24, -127,0,31,53,60,3,-17,-25,-13,5,-13,14,-21, 
  /* [44][0][][] */ -49,81,-127,-56,16,-25,-37,-20,-14,7,41,9,-19, 15,42,-16,-90,42,4,2,54,-7,46,14,47,-36, -77,-11,-72,-56,109,35,-2,-8,-30,54,38,-2,-4, 
  /* [45][0][][] */ -127,-27,8,43,11,6,-4,-33,9,36,-26,-45,21, -19,50,-5,-19,19,14,-10,-16,-10,-28,-26,-13,40, -21,-49,-111,-55,35,-19,-12,-20,18,18,15,-13,-17, 
  /* [46][0][][] */ -127,-72,-5,2,6,-3,20,-47,-7,-13,-16,-10,-11, -41,-5,6,-33,13,10,-13,24,20,23,1,23,14, 27,65,18,-41,41,-5,-4,28,-16,31,-19,10,-34, 
  /* [47][0][][] */ -64,-26,-75,-23,39,-32,-71,32,50,-63,-11,48,-43, -100,-6,30,20,55,-53,-107,88,15,-80,-64,-1,-36, -124,6,127,-36,28,-13,-60,99,32,-28,-28,42,-90, 
  /* [48][0][][] */ -35,110,47,46,-16,80,-18,-41,-9,-59,94,-46,24, -30,89,63,96,79,76,-53,23,-9,-42,91,-58,6, -35,-77,2,13,104,-127,72,45,-16,17,-74,-86,9, 
  /* [49][0][][] */ -35,34,-92,-9,18,-105,-82,91,-71,-39,27,-14,87, -27,-20,-42,-15,53,26,-56,59,-38,18,-31,55,37, 22,4,58,-127,84,50,-19,43,-70,122,-41,-23,63, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 50,1,3,13 } };
const TfArray<50, float> quant10_scale = { 50, { 0.024048680439591408, 0.0097802793607115746, 0.0067898216657340527, 0.018247585743665695, 0.011492526158690453, 0.015350476838648319, 0.0075118313543498516, 0.0052432501688599586, 0.006525134202092886, 0.01205611415207386, 0.016193894669413567, 0.0060701821930706501, 0.0084951389580965042, 0.011988271959125996, 0.0098266741260886192, 0.0091081447899341583, 0.010134893469512463, 0.011032167822122574, 0.0090402113273739815, 0.0067781368270516396, 0.010498007759451866, 0.0064512472599744797, 0.010474045760929585, 0.0066297980956733227, 0.011047801002860069, 0.007554300595074892, 0.0055882795713841915, 0.0071005825884640217, 0.015797993168234825, 0.0067098732106387615, 0.0066238301806151867, 0.0077715874649584293, 0.0078251492232084274, 0.0081645473837852478, 0.01286899670958519, 0.0083971889689564705, 0.0060192849487066269, 0.0092056272551417351, 0.0083472896367311478, 0.0073540979065001011, 0.014597572386264801, 0.0065964441746473312, 0.012194585986435413, 0.013409080915153027, 0.0098228380084037781, 0.015387433581054211, 0.015111397951841354, 0.007509737741202116, 0.0073536792770028114, 0.0067075146362185478, } };
const TfArray<50, int> quant10_zero = { 50, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension11 = { 1, { 30 } };
const TfArray<30, float> quant11_scale = { 30, { 0.00020844375831075013, 0.0012990926625207067, 0.0012380627449601889, 0.00093880412168800831, 0.0013317703269422054, 0.00085936626419425011, 0.0011784080415964127, 0.001243466860614717, 0.00089857680723071098, 0.00075406848918646574, 0.0010723565937951207, 0.0013354633701965213, 0.0011834461474791169, 0.0010592592880129814, 0.00068075646413490176, 0.0010106199188157916, 0.00022619355877395719, 0.0010982842650264502, 0.0013027405366301537, 0.0013726017205044627, 0.00055546453222632408, 0.0013481540372595191, 0.001214426476508379, 0.0010154396295547485, 0.0010110886069014668, 0.0011645331978797913, 0.0010726072359830141, 0.0011043937411159277, 0.0012503057951107621, 0.0010507578263059258, } };
const TfArray<30, int> quant11_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[30*1*3*50] = { 
  /* [0][0][][] */ -74,-25,-41,-69,12,-16,-44,-81,-51,-57,-54,-63,-36,-20,-108,-17,-68,-27,-24,-33,-27,-96,-71,39,-40,24,-40,-81,-74,-39,30,-22,-28,-99,-66,-35,-46,2,-64,-74,6,-12,-32,16,-8,0,-2,9,-36,13, -2,39,-15,-79,-23,-97,-40,25,29,-51,-72,-19,-127,-30,-25,20,-39,15,-55,28,-50,-13,-22,-38,-30,-38,-55,-60,-22,-16,-42,-16,36,-28,-48,-56,-67,43,23,-69,56,1,-17,-25,-37,-24,-91,9,-57,-6, -78,-26,-43,38,-34,-58,7,-104,-50,-2,7,-28,14,-58,-11,-1,-47,-73,-68,-59,-68,22,-42,8,-39,-20,32,-38,-15,36,-11,-73,-16,-19,18,-12,-75,-45,-38,-38,-52,-49,18,-21,-60,-10,-52,1,-42,-9, 
  /* [1][0][][] */ -77,-6,15,-29,-37,6,47,17,40,0,-107,3,9,-68,21,13,32,-73,-64,49,-31,27,-89,-30,15,-1,25,18,-19,-5,-30,-97,8,10,-23,-44,47,-62,-20,16,-54,-41,-43,-21,-6,-2,-127,13,29,18, -9,11,0,-70,-33,17,-15,43,34,-68,-15,26,21,-94,5,-9,20,-8,37,9,-46,21,-30,-49,-42,20,28,-67,-34,3,25,-92,0,32,-28,-102,-11,-50,-103,-8,-35,-1,-9,-13,-21,39,-30,-7,17,9, -27,16,-13,-29,21,-9,55,48,26,-24,-13,-17,17,-41,-23,-7,50,22,41,-21,-47,28,10,-5,11,56,5,-88,-55,4,8,7,36,33,28,-82,26,-66,-117,-27,-27,-8,10,-9,23,-16,-56,36,18,30, 
  /* [2][0][][] */ -59,-118,17,-62,-82,-80,4,12,37,-90,-57,-49,0,12,-24,31,12,-7,49,-85,0,13,40,12,-38,38,48,-55,-60,-30,-49,-19,-37,-84,-105,-4,-2,-51,-11,4,-16,-42,-45,-32,-99,11,-30,-35,56,-90, -43,-21,-19,-75,39,-90,-14,-18,-45,-40,-11,-16,40,-24,5,-30,-4,-25,5,-39,2,-55,-18,12,-1,19,11,-18,-35,-13,-90,38,-22,11,-120,6,27,-41,1,-7,-73,-3,-44,-39,-12,2,-62,0,-49,-2, 30,9,-63,-4,78,-127,-3,-1,-35,18,-117,3,20,-5,-20,-50,-64,-24,8,-22,26,-55,-53,-13,-4,-39,-49,11,-70,51,-24,-33,-19,13,-44,8,10,-12,13,-8,-56,-31,-32,-49,5,12,-11,7,-105,32, 
  /* [3][0][][] */ 18,33,3,24,35,5,31,9,36,51,-54,-17,-54,-62,18,18,34,-48,-77,-57,-79,-15,-37,-33,-14,71,-15,-66,44,-67,39,-55,1,-10,-13,-78,-66,-34,-103,-42,50,-18,-34,-18,29,-2,12,59,42,64, -41,-13,29,12,113,-127,48,14,-35,48,-22,40,-35,32,34,19,-3,34,-99,3,-120,-44,7,-55,-47,10,-53,-55,-44,-8,18,35,-19,-8,-24,-59,-84,14,-47,-22,27,27,-46,-1,-26,-79,-7,17,-8,43, -69,-8,49,-60,-5,19,-45,4,-26,-63,-37,75,-51,12,-33,-60,-32,-64,-34,59,-62,51,-14,-107,20,-83,60,-12,-44,-53,21,61,-53,89,-43,22,-57,59,14,-60,-47,62,-56,-50,-43,-30,-30,-43,-28,-4, 
  /* [4][0][][] */ -30,-28,37,-12,25,18,6,51,-34,-29,7,-3,10,-3,-43,8,-3,-2,9,-65,-59,21,-2,11,-59,20,33,-66,-24,10,-1,4,-53,-44,-1,-67,49,-38,-73,1,-56,12,-10,-32,13,-31,-1,23,60,60, -50,-61,21,2,26,14,3,6,-30,-60,-10,-14,-12,-39,-15,21,-2,6,-11,-15,-68,0,-42,21,-111,1,-8,-52,5,-11,-17,-2,-46,-62,13,15,-7,-10,-89,-3,-40,-28,4,7,-99,-63,0,0,-12,-3, -9,-65,4,-13,-11,-12,16,30,-38,-31,4,-25,3,-27,-14,-47,-3,4,31,-8,-74,-27,-1,5,-54,-28,-18,-62,-19,-28,-3,-9,-57,-36,22,-83,-32,-24,-127,27,-28,-38,46,25,-68,3,15,-20,-47,-31, 
  /* [5][0][][] */ -15,-41,-5,-41,67,4,39,-2,-15,-50,-18,-32,-15,35,14,-23,28,2,-22,22,-70,32,-49,23,-59,-12,4,-36,-22,-27,-36,80,50,-57,-51,24,-26,-6,-84,-53,-60,-33,-58,-34,-59,-1,-26,14,1,6, 56,24,-11,-18,-29,44,22,-1,-65,-36,45,-28,-31,-97,-53,6,16,18,37,-68,-20,18,-15,-99,-50,-17,19,49,38,-106,-30,32,-10,-52,37,-27,-48,0,-127,-59,-32,10,14,-30,-40,82,65,0,17,-12, 70,59,37,24,-45,48,-23,-8,-85,-2,-83,-22,37,39,41,22,-27,12,-32,3,2,-2,-25,-83,25,-19,-35,-47,-8,-24,-42,-41,15,28,-6,35,-86,66,-29,18,61,-65,5,-36,47,35,44,-17,-1,6, 
  /* [6][0][][] */ -22,-45,37,8,11,-7,12,20,-23,38,-20,-57,29,-32,36,12,-65,10,-43,-40,17,14,-10,65,-3,-25,33,43,-61,30,44,13,-48,-27,9,9,41,-38,-15,0,-99,-37,5,-14,-14,-46,2,17,-25,28, -66,13,16,-89,13,7,2,1,52,-52,-127,-12,-12,-62,16,22,-43,-62,-55,11,-69,12,-43,21,-94,20,-4,-1,3,-24,-37,-49,-41,-20,-71,-16,-3,-62,-55,-65,-21,35,-80,-117,-71,53,-50,-7,19,4, 4,23,23,-29,65,-21,40,41,12,-36,-7,21,28,-70,-36,21,53,-30,11,30,6,42,-53,6,-32,12,16,0,-37,32,32,-14,3,4,-36,-18,23,-8,-14,-42,-30,48,-32,-71,15,11,-29,15,47,28, 
  /* [7][0][][] */ -48,-81,-58,-94,-14,-35,-12,-41,-34,-46,-32,-17,15,40,39,-48,-38,65,-28,-40,-19,-28,-19,-34,-49,-32,-77,-18,-12,-1,-44,-25,-11,-46,-25,24,-11,1,-13,13,-18,-64,-43,-4,-51,23,19,-81,-12,-28, -18,-36,-60,-127,14,-47,-11,-5,-2,-43,-18,-17,7,46,18,-29,13,26,-58,-48,-7,-22,-7,-33,-9,2,-61,-39,-37,2,-21,6,9,-19,-47,41,-18,39,-12,47,-17,19,-12,-2,-41,-2,27,-38,29,-39, 26,-13,-19,-33,44,10,-14,-33,-42,-9,9,21,54,51,43,-11,25,32,-23,-31,-5,-42,23,-19,-25,13,-38,9,18,34,-43,23,-19,-25,-6,31,-21,43,-33,24,8,40,-28,34,-8,54,-4,-62,-4,6, 
  /* [8][0][][] */ -18,-55,32,-71,27,-11,42,72,-23,-40,-16,24,-10,-68,41,26,33,-28,-21,4,-44,6,-52,-52,-110,42,-27,-41,-126,-38,23,90,-80,-52,-54,-62,-8,35,-51,-46,-48,72,-81,7,-117,-14,14,76,38,-17, -22,-68,25,-127,33,-32,37,47,16,-57,-7,21,22,-2,-68,9,6,1,-26,23,23,-8,-39,11,2,28,-2,-5,-99,0,23,-4,-84,-6,-99,1,-19,88,7,9,-56,-15,-72,-104,-70,-8,-113,-7,13,-77, -74,-39,-47,-29,55,-45,53,-34,-27,-21,-99,37,15,-3,-114,37,-22,4,51,-18,49,-8,-14,53,20,32,73,49,-76,4,-106,-12,-2,-2,-68,42,-15,-31,60,17,-19,12,-42,-79,-1,29,-93,19,-111,24, 
  /* [9][0][][] */ -40,-5,-69,-2,-67,-59,5,-39,29,-53,65,54,-49,9,21,-60,-19,-55,-15,-14,-26,9,-13,-59,4,-2,-90,-24,-7,-79,15,55,79,-28,-17,-28,-9,19,-37,17,-68,7,-25,0,3,-52,-6,-37,-58,47, -34,-62,-12,-116,32,-72,15,-36,31,-36,27,33,8,56,-27,-24,-7,11,-19,8,-127,-61,-8,6,-69,28,-97,-47,-26,-60,5,17,-55,-58,10,-51,-22,7,-40,-5,51,12,-56,-52,-30,-69,-39,-11,-47,-61, -12,-37,-71,-60,10,-25,41,-24,-23,-71,41,-30,-99,-45,10,-37,-53,-30,-18,-72,-6,-90,-8,4,-44,-41,-18,-28,-98,-54,-25,6,-43,-63,-48,-52,-44,-29,-33,-1,-12,-43,27,-35,-73,-22,24,-39,-61,-63, 
  /* [10][0][][] */ 44,-82,-18,-30,-71,11,8,-62,5,-19,43,-17,-47,-1,-15,-26,34,34,-20,-37,-75,10,53,22,13,11,-7,27,5,-24,-7,26,61,-27,20,-14,-67,-25,-13,-14,0,30,-2,-2,-16,-5,-9,39,3,-10, 6,16,-45,-36,-94,-37,81,-18,25,-108,-55,-11,17,-45,-55,83,-49,7,-17,-34,23,23,-9,-50,-94,-47,-4,-81,40,-53,-22,-69,25,-91,-11,63,-46,42,-1,-24,-7,-34,-2,-15,-86,-72,-37,-47,-3,-19, -93,-127,-36,-85,-49,-8,-50,-57,-55,-83,-92,13,-27,-99,-34,-5,-12,-56,3,-43,-1,-7,-90,-20,-59,6,-35,-34,-46,19,-10,-67,-103,-61,-81,12,16,-84,-21,-48,-47,-24,-115,-96,-55,-30,-39,-65,-9,-28, 
  /* [11][0][][] */ -19,8,-38,-32,33,18,-51,-36,-6,26,-57,35,-8,26,8,-38,33,-6,-57,40,13,-10,-14,-26,29,-46,-43,23,4,26,-15,31,-31,18,-14,20,7,26,3,24,4,35,-77,-29,22,-48,7,-2,-3,6, -30,10,-2,-34,-29,4,-56,-16,-14,1,-25,9,-27,-14,18,2,-26,-28,-54,19,-54,-26,-52,-27,-8,-84,-24,-12,12,8,13,37,16,-16,-9,-21,-26,-38,-45,-37,-31,25,-27,11,-17,-21,-31,22,-3,-6, 22,-5,37,41,-12,36,-10,0,32,-12,11,-3,-38,-44,-17,47,11,1,6,-4,-69,15,4,-8,-14,-6,21,-74,29,-54,17,9,2,3,21,-83,-10,43,-127,-34,7,17,24,-17,-7,9,34,20,32,29, 
  /* [12][0][][] */ -81,-67,40,-56,-39,-74,-23,-70,-54,-24,-59,-67,37,-20,-21,-14,30,-25,24,-28,-8,5,0,27,-54,-43,26,-1,-97,-16,-50,45,-60,-33,-58,-18,64,-52,2,-14,-58,-41,-52,-99,-55,4,-55,32,40,-49, -9,-19,-14,-12,78,-42,-8,-41,-83,-32,-39,-29,-4,9,-51,-42,-32,-60,12,2,14,-2,1,5,11,-48,-55,18,-87,29,-15,-30,-37,17,-60,15,44,-9,-1,-42,-52,-26,-81,-54,-29,-66,-127,72,-60,21, -8,13,-15,-36,37,-57,4,24,25,19,-57,70,-52,-44,-44,-10,-69,-8,-77,20,-27,28,-67,-29,2,-33,-50,18,-7,55,53,8,43,21,-37,-7,-50,-34,-27,-50,-34,50,-35,-85,50,-6,-5,60,-67,50, 
  /* [13][0][][] */ 6,-12,29,5,60,-24,13,37,-12,14,-62,38,-22,7,22,18,22,42,-86,48,-127,-9,-16,-40,-61,-49,30,-26,-9,-86,85,43,-21,-41,17,-29,-45,75,-21,-15,4,72,-67,-70,-29,-51,7,44,-18,21, -97,28,-3,-57,32,11,-30,-8,-13,-57,-18,54,-61,14,-62,-12,-10,8,39,29,-25,-13,-44,-11,-21,-69,18,21,-85,-100,12,32,-60,0,-23,13,-10,64,18,-36,-86,21,-43,-75,-3,-84,-31,-21,-16,-29, -53,-54,-82,-32,-56,85,9,-38,26,-34,-69,-36,-81,-3,-38,-79,-33,-45,27,17,-14,26,-32,6,-13,-44,15,26,-10,-65,-56,-64,-46,21,-35,-7,38,5,-17,-27,-18,35,-102,-47,-17,-22,-66,-100,-41,9, 
  /* [14][0][][] */ -61,-114,10,-89,19,-8,-78,1,-91,-11,-52,-45,-20,-43,13,-58,44,-6,-5,-14,18,44,-6,38,-15,22,-2,17,-60,-29,-5,-5,-78,-37,-48,-106,75,-85,-70,-14,-61,-40,-77,-83,-44,-34,-80,20,-27,-10, -46,-84,24,-113,18,-118,27,-14,-23,-21,-117,-121,-37,-43,-29,-32,-119,-40,-52,-48,-32,-56,23,11,3,-79,-43,12,-16,-12,4,-9,-55,18,-27,-8,22,20,8,-39,-127,-56,-29,25,-24,-40,-56,44,29,-44, -36,-71,6,23,38,-20,36,-32,-5,24,-29,18,11,-29,-93,-20,-84,-8,-73,3,9,-71,-82,-13,-23,24,-16,49,19,-21,-79,-15,-4,-30,-57,-35,-67,-71,-56,-31,-16,-15,-16,-22,-33,34,-5,50,-5,5, 
  /* [15][0][][] */ -10,10,25,26,52,-49,10,-26,-2,-12,-7,6,-121,10,58,30,-30,60,-1,-52,-48,20,17,-30,-26,-12,-25,15,9,-36,43,17,50,6,5,-65,-46,6,-69,12,17,-31,-5,-10,-3,-46,24,20,-8,55, -66,-32,6,-35,-29,-7,-33,50,21,3,-67,-20,32,-53,3,8,-15,-13,-3,-2,-78,4,-53,-84,-89,-36,54,-57,-45,-6,41,43,-18,-69,-73,-38,-28,26,-38,3,-28,58,-85,-71,-59,-23,-45,4,18,-18, -24,-68,-46,-50,6,-8,-45,1,-8,-36,-56,60,46,-9,7,-34,-24,-14,5,36,43,49,-4,3,-89,-7,27,27,-67,57,-33,53,-61,-1,-105,39,33,51,-2,5,-127,38,-63,-16,-58,-18,-36,2,-19,39, 
  /* [16][0][][] */ -43,-19,-32,-31,-63,-38,-90,-58,3,23,-68,-29,7,-44,-31,-43,-16,-105,13,-26,-83,-93,-47,-69,-2,-119,-44,-19,-69,21,9,20,-72,-97,-56,-5,-108,-22,-50,-95,-65,-32,-108,-8,7,-4,-55,-42,-127,-38, 12,-28,-6,-36,-48,-54,-106,-20,-24,-77,0,-92,-35,32,-6,-5,7,25,37,-60,-63,-83,-58,-69,-114,-68,-44,-64,15,-80,-82,21,-48,15,-38,-17,3,28,-1,-42,-7,-17,-15,-25,-64,-38,-51,-38,-49,18, -46,-44,18,-2,-64,-82,-28,-15,7,-36,-32,44,15,-33,24,50,-73,-32,14,-26,-55,-77,24,3,-85,-13,-45,8,-32,-37,54,-19,-86,-45,-10,-25,-52,-35,-5,-26,7,-74,-90,-67,24,-85,14,-46,-46,-57, 
  /* [17][0][][] */ -40,-10,-96,-18,31,-84,-12,-52,25,-6,-12,23,12,-30,-119,-14,-74,-63,-22,26,5,-37,-39,3,13,10,23,24,-30,24,-72,-67,6,21,-39,2,29,-21,32,-16,-44,-44,35,-73,-8,2,5,-15,-47,70, -36,9,-51,-30,-18,-103,-7,-38,52,5,-17,52,-6,4,-27,41,-38,-110,-46,15,14,23,-54,-58,19,-32,-54,2,-57,8,14,-50,12,15,-127,18,25,-28,-1,-30,-54,-13,-43,-62,-11,-48,-27,-8,3,21, -95,22,-50,-28,-4,-77,-52,53,35,5,-64,98,-18,-20,-71,50,-49,-46,-108,44,11,-18,-65,-36,15,-61,7,42,-53,0,65,-9,-12,24,-106,-9,-5,25,17,-52,1,9,-120,-90,19,-88,-46,-70,43,43, 
  /* [18][0][][] */ -9,-22,36,8,64,-25,13,42,-26,0,-56,18,-30,10,2,26,-11,-13,-35,16,-52,-1,-71,-31,-68,-30,14,5,-15,-42,58,40,-24,-93,-6,-59,-30,47,-27,-34,-14,29,-25,-40,-23,-89,19,32,-18,-1, -127,-15,-15,-51,-3,1,-18,8,-15,-58,-33,16,-25,16,-35,-34,-4,-13,-12,29,-36,21,-39,-31,-27,-58,22,-15,-34,-57,15,20,-29,5,-6,15,-38,26,-3,-32,-32,19,-45,-40,-41,-53,-44,-17,-90,-35, -35,-16,-29,-24,-46,47,28,-40,31,-9,-49,7,-54,-16,-47,-105,-25,-23,-4,7,-6,21,-39,4,24,-47,9,23,-21,-34,-47,-15,-2,4,-7,-1,28,34,-8,-29,-18,6,-89,-47,-5,-24,-55,-74,-41,-8, 
  /* [19][0][][] */ -81,-17,2,-35,21,59,50,3,-14,-24,-127,-40,-13,-25,23,34,-18,2,-51,-56,-27,51,-56,-68,-50,8,31,-9,-39,20,-37,-40,-51,-40,-45,7,-5,-61,-29,-1,-23,-25,-56,-58,-21,-57,-56,2,27,1, -38,-9,25,-79,-3,21,22,20,53,-75,-31,-6,-14,15,18,-10,58,-8,-11,-17,15,5,-5,-3,-38,16,14,-5,-44,-12,-12,-24,15,-62,-40,-8,-38,-20,-34,19,-9,-11,-56,-23,-62,9,-74,-14,17,-29, -3,-18,-6,-13,49,-40,50,34,12,-28,-36,10,14,19,-6,32,14,-20,22,-76,33,-65,-38,2,-15,27,18,-28,-22,26,13,-18,1,10,-3,34,-26,23,1,23,-21,-68,-45,-53,-10,13,-13,-43,24,3, 
  /* [20][0][][] */ 26,-49,-48,-19,25,-16,-31,-61,-40,-25,-9,-23,-12,13,4,-35,-26,-78,34,-37,-47,-55,-26,11,-30,-50,-62,-11,-31,-16,-20,-38,-6,-30,-35,-4,-100,-61,-17,17,28,-19,13,-47,-3,16,63,-76,-5,-29, 30,-26,-20,-11,-23,-10,-9,22,24,2,28,-2,-41,-77,10,20,35,56,-63,22,2,-47,-15,-40,-43,-30,-17,-59,-27,-107,-54,-32,-41,27,-2,-58,-41,-2,-20,-29,25,-71,-35,8,-60,-6,-57,-63,-41,-70, 43,-36,-9,16,-35,-57,-78,-107,-1,20,-53,-30,-69,-62,-45,-32,-52,-63,-31,-11,-79,2,-19,30,-16,12,-23,-17,24,-24,-11,-35,-3,-33,8,-33,-51,-54,25,-25,-37,47,-12,-76,-127,37,8,-21,-65,-48, 
  /* [21][0][][] */ 22,-39,-5,12,-35,-7,1,8,28,-54,42,-21,-46,6,35,-6,-12,67,22,-43,-127,-5,23,39,-7,-53,-15,-22,0,-31,16,19,10,-44,7,-57,10,-18,-77,0,2,33,27,9,-23,15,19,-4,-26,-8, -1,-42,5,-15,-69,-20,-61,21,2,-26,-17,26,-24,-55,18,6,-37,23,-1,-17,-51,-6,-24,-48,-76,13,12,-56,1,-27,-20,-64,-10,-99,-37,-51,10,19,-76,-58,-30,-14,-10,-33,-91,-28,26,-17,13,-51, -18,-69,32,-45,21,-8,-21,16,-15,-81,-81,-20,29,-36,4,21,13,0,-28,-30,0,26,-81,-46,-51,64,18,-51,-43,-2,-20,-19,-12,-118,6,10,48,-53,-21,-14,-31,8,-7,-45,-75,-15,-25,11,43,-15, 
  /* [22][0][][] */ -86,21,-28,-6,23,-12,23,-18,-29,25,-90,-53,38,39,-14,-77,-1,-24,-1,-45,4,-31,-3,35,11,-16,-14,11,-52,45,-40,-11,-31,14,-29,24,13,-58,11,18,-40,-50,-111,-74,11,4,-25,50,-75,11, -51,-74,25,18,5,-1,18,-18,-12,-4,-81,-17,12,-39,-14,-33,14,-63,0,9,8,22,-34,42,11,16,-16,36,-49,27,-116,-22,-96,-74,-29,-6,15,27,24,-9,-79,-27,-87,-66,-29,-69,-36,56,-17,15, -24,-36,55,-64,-26,37,46,-28,21,-39,-79,13,-55,-62,17,50,-35,12,-11,-3,-63,54,-27,25,-106,14,35,-38,0,-46,-10,-44,17,-116,-7,-63,0,-26,-72,-41,-38,49,-21,-34,-127,10,-22,44,17,-3, 
  /* [23][0][][] */ 24,1,-5,7,53,-35,67,39,17,14,-42,-22,-53,18,27,55,12,-8,-52,-50,-76,-29,-72,-89,-26,29,-30,-115,8,-33,26,8,-46,-39,-32,-35,-75,36,-121,30,19,-37,-38,-14,12,-16,19,46,26,48, -37,41,7,-29,48,-82,44,29,-42,-6,-34,24,-48,46,4,14,-36,10,-83,0,-96,4,-3,-97,-83,-10,9,3,-34,-40,16,35,-64,25,-7,-11,-39,50,-25,-33,-34,0,-30,47,-22,-90,6,28,-57,10, -89,-24,-6,-88,-12,37,3,-71,-52,-50,-15,50,-105,-21,-82,-115,-40,-24,-84,54,-41,33,-58,-60,-7,-96,59,28,-127,-86,-28,27,-50,17,-82,-31,-2,69,0,-64,-53,38,-102,-125,-50,-74,-50,-113,-34,-26, 
  /* [24][0][][] */ -12,-1,-104,-54,-7,-42,-17,-26,70,61,25,25,17,23,-29,-42,-94,-66,-88,26,12,-50,-29,-83,41,-88,-52,33,14,20,6,-79,-40,-9,-5,-28,-103,-27,10,17,-33,-14,29,-63,30,-17,18,-56,-40,19, -39,11,-81,-12,4,-9,-38,-6,-11,-18,-19,53,5,32,-31,-14,-74,-96,-48,40,-11,6,14,-26,12,-41,-47,30,-60,-1,49,-28,-46,-9,-127,0,-23,13,13,13,8,-42,-102,-61,-8,-94,-44,-44,-17,18, -35,9,-23,-20,12,-9,-51,8,28,16,-104,60,18,19,-37,38,-18,-87,-65,49,27,72,-29,-19,22,-16,-19,28,2,23,1,-59,40,13,-67,-4,-9,-13,31,-14,-4,43,-81,-103,39,-68,-62,-91,23,50, 
  /* [25][0][][] */ 13,-59,38,17,70,-4,-25,14,-59,-57,45,26,5,-22,-20,-18,41,57,37,-49,-81,37,-18,-16,-109,25,11,-84,-9,50,-5,-14,11,-58,44,-99,-13,7,-127,0,-2,65,29,5,-12,6,16,22,7,20, -39,-51,-3,26,-16,0,-50,-57,9,-36,16,-2,-61,-10,-36,-15,14,37,25,-10,-73,21,15,20,-54,-3,19,13,14,-42,-20,-44,-44,-93,-11,-11,-12,23,-23,31,-43,-6,15,0,-84,-83,-5,30,-24,48, -10,-58,32,-13,43,7,3,1,39,-74,30,-3,-65,-31,23,-20,11,2,23,-8,-120,48,-13,47,-46,-5,-37,-58,-6,-17,32,-8,-4,-102,11,-49,20,44,-95,19,-6,46,15,-1,-78,-44,-6,22,-36,-1, 
  /* [26][0][][] */ 23,-26,28,11,-2,-19,13,30,-19,36,-20,-8,-42,-49,41,46,21,-5,-19,-5,-95,-3,-31,-67,-41,40,12,-60,-15,-10,22,-5,1,-80,-51,-81,-11,-25,-46,-55,-62,-15,-48,-10,-35,-21,18,37,55,-13, -86,-53,29,-62,22,-43,64,40,12,-78,-79,23,35,-15,1,-21,32,-7,16,-7,5,19,-31,47,-90,-11,16,0,-105,-31,76,69,-127,-64,-110,-18,26,42,-2,-11,-25,21,-64,-79,-85,-23,-105,-13,-32,-7, -61,-12,-18,-53,39,-102,25,31,15,-1,-117,27,-2,-1,-90,-56,-31,-39,16,-12,20,10,-50,-18,10,19,12,46,-72,46,-64,-12,25,38,-74,13,-6,-22,25,2,-52,21,-73,-44,2,8,-57,22,-62,20, 
  /* [27][0][][] */ -114,-47,35,7,36,31,54,7,-79,12,-72,-54,40,-32,1,-53,5,-77,1,-17,-3,-7,-26,64,13,-14,-22,64,-66,58,-75,-9,-48,-16,15,24,47,-112,-18,-10,-60,-65,-127,-101,-1,-78,-88,53,-26,40, -6,-73,49,-57,-82,-4,39,16,0,-79,-57,-21,-32,-43,-62,33,12,-14,-34,6,-6,13,-55,53,-22,50,17,-18,-1,-25,-63,-39,-61,-60,-41,-58,6,-39,-22,-2,-59,7,7,-48,-44,-50,-55,11,4,37, -68,-74,49,-47,26,3,29,42,43,-117,-16,60,-61,-59,9,36,48,31,5,41,-38,46,-21,-8,-84,1,9,-99,-102,-82,-8,-56,-28,-14,34,-67,11,-50,-96,-35,-39,16,-5,-11,-91,-29,33,46,14,8, 
  /* [28][0][][] */ -44,-40,-79,-32,7,-42,-36,-27,-64,-127,-2,-43,37,-6,-26,-99,-33,20,-14,20,-21,-25,31,-27,-62,-23,-21,29,-107,14,7,22,-20,-89,-35,13,24,35,9,20,-5,17,11,-11,-69,-40,15,-49,-29,-60, -24,-30,-22,-64,-13,0,-25,-20,2,-27,0,-20,31,-1,-2,-54,6,-2,21,-9,-68,-22,8,-2,-20,32,-18,25,-58,0,-36,-23,-20,-66,-5,12,72,25,-6,-29,-54,-1,3,15,-48,-19,31,-21,-47,-2, -6,-50,-23,-28,-9,25,-52,-30,-36,-41,19,-14,-20,-21,33,-87,42,-3,-4,24,-104,-4,27,24,-50,21,-24,-17,-31,-30,10,20,-68,-41,19,15,10,35,-70,10,32,15,17,19,-107,-12,-10,-5,-28,-46, 
  /* [29][0][][] */ -22,47,-127,-45,-82,-47,6,-9,-45,-29,5,-60,-38,20,44,-72,-49,48,-17,-41,-31,-67,27,-15,23,-56,4,-8,-23,-57,-53,-24,10,16,-13,-10,26,-34,-28,37,-29,-47,36,9,-37,2,28,-75,-13,11, -47,-87,-53,-70,-17,-40,-33,-105,-38,-26,27,-75,11,16,2,-49,12,3,-34,-37,-39,-80,37,-43,-93,0,-3,-40,-94,19,-37,13,-44,-74,-87,21,-23,12,-44,-9,13,-46,21,5,-97,-34,3,-6,-60,-19, 4,-79,-30,-52,-20,-36,4,-43,-67,19,26,-55,37,40,-55,-106,52,53,70,-1,-57,-60,40,3,-25,46,41,10,-64,1,-17,23,-88,-39,-2,12,41,38,2,14,-77,13,21,7,-29,-48,-57,-39,-2,-105, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 30,1,3,50 } };
const TfArray<30, float> quant12_scale = { 30, { 0.0023183843586593866, 0.014448962174355984, 0.013770165853202343, 0.010441707447171211, 0.014812414534389973, 0.0095581719651818275, 0.013106665574014187, 0.013830272480845451, 0.0099942851811647415, 0.0083870133385062218, 0.011927125044167042, 0.014853489585220814, 0.013162701390683651, 0.011781451292335987, 0.0075716110877692699, 0.011240468360483646, 0.0025158037897199392, 0.012215501628816128, 0.014489535242319107, 0.015266555361449718, 0.0061780703254044056, 0.014994639903306961, 0.013507275842130184, 0.011294074356555939, 0.011245680972933769, 0.012952345423400402, 0.011929912492632866, 0.012283452786505222, 0.013906337320804596, 0.011686895973980427, } };
const TfArray<30, int> quant12_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension13 = { 1, { 20 } };
const TfArray<20, float> quant13_scale = { 20, { 0.0031419312581419945, 0.0036111955996602774, 0.0016478939214721322, 0.0026661327574402094, 0.0023253271356225014, 0.0032610071357339621, 0.0023834339808672667, 0.0029850415885448456, 0.0034558027982711792, 0.0038328138180077076, 0.0023749596439301968, 0.0023779005277901888, 0.0028342059813439846, 0.0022536925971508026, 0.0022761095315217972, 0.0033349967561662197, 0.0030775542836636305, 0.0025584141258150339, 0.002858936320990324, 0.0031936578452587128, } };
const TfArray<20, int> quant13_zero = { 20, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int8_t tensor_data14[20*1*3*30] = { 
  /* [0][0][][] */ -5,-13,46,43,-37,16,-3,4,26,5,-21,-1,-49,26,-21,9,-8,-49,61,-71,5,22,-68,71,-37,-47,23,-60,-73,-23, -1,2,-65,2,-22,-27,-24,-9,-6,17,7,20,23,60,-27,19,12,-34,-63,-25,12,-25,11,12,-26,-85,7,-15,5,-5, 11,-28,1,64,-32,6,-11,-2,-6,31,-30,29,-92,37,-5,12,5,-127,43,11,4,-52,13,53,-94,-34,-1,-9,-13,0, 
  /* [1][0][][] */ 7,17,-127,-7,4,10,-115,-16,-111,-8,-22,20,-59,-18,0,-101,-2,-2,-70,-81,24,-22,-33,-22,-45,2,-89,-12,-34,-38, 7,29,-8,-2,-17,-18,-35,-12,-4,28,19,-9,-1,-43,-1,-64,5,2,-2,-15,4,-43,-19,7,23,-37,-27,5,-50,-9, 5,-21,-23,-14,-40,-73,7,-13,-23,-3,-1,-15,28,11,-15,-7,-8,24,9,10,18,15,28,-28,-4,-39,-48,20,-17,-34, 
  /* [2][0][][] */ -36,-30,-51,71,-69,-9,4,-62,20,-9,-11,-42,-96,39,-23,75,-6,-65,116,-10,-20,55,-8,114,-124,41,87,-29,-76,9, -25,-18,-82,80,-88,-127,67,-92,33,-80,10,-84,20,54,29,5,2,-35,38,-56,-50,-26,-6,33,-97,-27,41,11,-21,-88, 24,-116,45,23,-52,-53,28,-22,21,35,-72,-58,36,-47,58,77,22,-23,73,17,-19,-62,24,77,-62,-59,35,-21,6,4, 
  /* [3][0][][] */ -19,21,21,-43,1,-57,-13,-27,8,-41,51,-21,78,-23,16,-8,9,35,-14,20,-28,54,-70,-47,-30,-36,25,-39,-98,-22, -6,-31,26,-46,-77,-108,-48,-61,-18,9,-62,10,28,-65,33,-11,15,-9,1,21,-24,9,-67,-48,-13,-84,4,-62,-62,-45, -1,-7,-16,9,-34,-58,32,-72,-79,-22,-19,4,58,5,-27,-60,5,30,-1,-127,-17,-44,-46,-6,18,-14,-32,-57,-37,-27, 
  /* [4][0][][] */ -6,24,-126,29,-46,-60,36,-51,-71,-23,-13,30,0,62,-3,-24,10,4,-30,4,-24,-43,69,107,13,-127,-18,51,0,-62, -17,42,-44,4,7,-11,32,-97,4,6,29,-14,-65,22,-24,-25,1,-20,19,16,-30,3,14,45,-8,-39,2,23,-67,-85, -4,45,-50,19,14,7,37,-114,-33,40,61,9,-30,-47,1,23,-6,-38,44,-49,-3,-24,64,4,-40,15,-24,44,-38,-63, 
  /* [5][0][][] */ 1,9,19,-19,-2,-40,10,-8,19,-5,30,-34,12,-12,20,22,10,-44,15,45,7,27,-35,-23,-52,-14,15,-23,8,-2, 8,-11,27,-54,-15,-69,3,-16,14,-21,3,-76,22,-40,20,19,0,-7,11,30,-25,24,-42,-64,-3,-14,34,-29,-41,0, 4,-13,56,-3,-127,-88,-7,-23,5,-6,-10,-25,37,-24,14,-17,9,16,28,-25,-20,-5,-30,-2,13,-86,40,-12,-83,-49, 
  /* [6][0][][] */ -15,67,-69,-97,-50,-63,33,-13,-59,-9,-13,4,-13,-122,56,-73,-8,-14,-104,39,17,-35,66,-127,6,-109,-21,65,-49,-99, 18,48,-36,-86,3,-10,40,-42,19,-62,102,-4,-6,-90,23,3,7,-17,-107,8,-21,-18,-1,-103,-16,-42,18,64,-76,-64, 17,47,-108,-58,9,-8,61,-106,4,5,-23,6,-10,-25,-50,-19,-3,-60,-69,7,-4,9,60,-94,-17,9,-64,51,-48,-86, 
  /* [7][0][][] */ 17,-25,-17,-49,-16,-14,11,-56,-75,23,-35,33,21,-45,17,15,5,29,-64,-43,6,-35,-11,-24,34,-32,-39,9,-1,-74, 11,0,-54,17,-39,-27,-30,-27,-42,1,20,-4,42,-2,14,26,2,10,-46,-51,-6,-21,-30,15,-27,-54,-41,-40,-28,-17, 7,-12,-17,6,-57,2,-44,-34,-29,1,-31,9,-26,-3,-17,-28,1,-52,-23,-37,4,-38,-64,3,18,28,-30,-127,30,9, 
  /* [8][0][][] */ -2,-18,-127,-54,15,3,-59,-30,-109,2,-27,4,-56,-23,-22,-48,2,-40,-61,-73,0,25,-48,-44,-116,4,-109,-59,-14,17, -11,9,-5,15,-28,8,-122,-41,-72,27,39,-14,-17,-26,14,-25,-3,-16,-31,-75,-11,4,-34,1,12,3,-40,-44,3,5, 7,0,1,-26,11,-27,-22,-19,-35,-21,-28,-9,-1,24,8,-47,-5,23,13,-63,8,-36,-21,-41,27,12,-85,-30,2,-54, 
  /* [9][0][][] */ 9,-56,-30,13,-4,0,3,-7,-46,4,-16,3,-43,-26,0,-6,7,36,-30,-49,-7,-51,-35,8,22,-3,-42,-47,-19,-15, -6,-59,-33,-12,3,0,-34,-4,-20,5,-43,-18,-15,-7,-15,-24,-1,-58,-2,-21,-19,-32,-65,-12,-1,-9,-33,-64,6,13, 1,-80,-1,-3,-11,-36,-127,5,-18,26,-31,-39,-19,13,12,-8,4,46,22,-18,15,-19,-56,-2,-8,-15,-24,-72,19,6, 
  /* [10][0][][] */ -20,-28,-26,47,-29,-103,10,-25,48,36,35,-106,5,57,11,38,-5,-46,39,-49,30,-7,-12,29,-53,-38,19,-51,12,16, 10,-35,-54,9,-89,-85,24,-95,-14,30,-3,-54,-23,29,9,-15,2,-35,82,-20,-22,-30,28,72,-21,-111,-15,29,-15,-52, 2,-3,-38,-33,-127,-89,8,35,-68,60,-1,-68,-108,40,-40,-8,-7,-90,5,38,17,-69,-4,-14,-62,-124,-67,23,-24,-17, 
  /* [11][0][][] */ 17,-79,24,9,-58,-90,-33,42,38,23,8,-41,-20,49,-1,27,10,7,44,-7,-20,-79,-35,26,3,-101,22,-33,-16,5, 0,-89,-2,-1,-1,-25,-52,31,-30,21,-85,-38,-107,22,9,-15,-12,-31,37,37,-34,-72,-9,-96,-39,-98,-101,-21,-15,33, 20,-56,18,-4,25,-16,-123,31,-31,57,-97,-3,-109,-65,-20,15,-8,-106,-48,37,37,-86,-80,51,-74,3,-19,-127,39,57, 
  /* [12][0][][] */ 9,-19,39,-39,-15,-4,38,-14,16,-31,85,-115,-35,29,-15,22,-14,-60,9,27,-16,59,-86,-64,-127,-3,25,-25,-40,-62, -10,-4,8,-94,-44,-13,10,-54,45,-14,16,0,18,-10,-12,25,17,-10,17,22,-6,54,-77,-38,-76,-19,48,-11,-23,-20, -6,-8,66,-39,-51,-73,-9,-8,13,5,30,-42,42,-27,25,14,-7,6,-23,26,-4,50,25,-28,2,-9,28,-28,-50,-37, 
  /* [13][0][][] */ 11,64,45,-48,-10,-23,32,-60,62,-25,67,22,-18,-41,27,-2,9,-1,18,32,40,0,62,-33,3,-33,-2,26,-60,-54, 14,36,-15,19,15,-19,-12,-93,-18,-32,19,-13,-41,-47,-3,1,9,-6,-45,30,-18,28,-37,13,-9,-1,23,81,-21,-64, 13,27,13,-5,7,-42,20,-127,-49,-14,49,0,7,-77,-15,-62,-9,-19,-2,12,12,27,-31,-8,-8,-6,32,25,-23,-73, 
  /* [14][0][][] */ 7,-78,-42,-53,-66,-6,-52,9,-16,-6,-17,60,22,12,-28,48,22,-72,-42,-66,2,10,-50,-1,-27,-100,-31,-48,-29,-49, -17,-7,54,55,-53,17,-39,31,8,41,-86,36,-32,-102,-5,-84,26,-53,7,11,-11,-112,20,-40,-62,-118,27,-3,-127,-30, -6,-24,19,24,-64,17,-32,-20,-54,-5,-51,41,60,-31,-12,31,-8,-52,-34,-90,-53,-19,13,51,-71,-54,-61,-42,-25,-88, 
  /* [15][0][][] */ 0,-9,13,-20,-47,-7,8,-35,-11,2,-57,-29,6,-19,-12,-59,2,30,-22,-19,9,-25,-6,-25,-21,-49,-14,-35,-65,-21, 0,-62,-38,-35,-9,-20,-14,-26,-39,-9,-12,25,42,10,2,-46,3,7,0,-70,-12,-19,-4,-13,25,-62,-16,-21,-31,-18, 5,-31,-32,-5,-69,-42,-55,-37,-41,-32,-32,17,-23,34,-20,-16,1,-60,-5,-70,-31,-55,-114,1,0,-71,-22,-127,8,7, 
  /* [16][0][][] */ -1,9,9,13,-6,-22,15,-27,-2,14,17,-41,12,20,9,23,-11,-48,48,21,8,24,-35,28,-78,0,17,1,-28,-14, -9,-27,12,50,-62,-59,29,-3,34,-25,-37,-63,13,32,14,36,-11,-20,23,2,19,53,-24,36,-27,2,25,-23,-28,-5, 0,-31,4,21,-80,-127,-19,-30,15,11,-26,-42,20,39,44,24,-11,8,43,6,-2,13,20,19,3,-124,22,4,-16,-23, 
  /* [17][0][][] */ 6,31,-127,-46,23,-3,-6,-28,-94,-6,33,-19,-42,-15,-5,-26,-20,-71,-108,-35,26,-58,-55,-60,-75,26,-108,-20,13,-4, 3,-50,-40,36,4,-3,-53,-37,-124,-20,36,-8,-85,-86,25,-25,11,-59,-56,-68,-7,26,-16,-75,-18,14,-123,-47,21,10, -3,-2,-52,-1,27,23,-49,-78,-41,-17,4,-48,-40,-54,-2,-52,-21,20,-38,-60,-43,-55,-38,-29,40,-12,-53,-5,-1,0, 
  /* [18][0][][] */ 0,-47,-119,-1,26,7,-68,-1,-116,-2,-5,1,-1,-33,-23,-36,-11,-42,25,-127,12,-66,-100,-34,-44,-10,-93,-50,5,-9, -10,-42,-53,0,-7,-2,-63,-34,-49,-12,-54,12,-46,-2,-11,-16,8,17,34,-77,15,-91,-58,17,-18,11,-32,-79,-16,-6, 14,-44,17,-15,-6,-45,-38,12,-18,28,-45,-25,44,73,28,-41,0,1,3,-45,4,-49,6,-40,34,-87,-33,-25,-70,-72, 
  /* [19][0][][] */ 3,-78,-52,-14,-17,9,-37,29,-56,17,-47,25,-7,-21,-23,-5,-6,-43,-43,-35,19,-32,-72,-22,-35,-23,5,-35,17,13, -2,-58,-20,6,-27,-32,-10,3,0,48,-11,-28,3,9,-1,6,0,-59,-11,-20,-9,24,-71,-19,-55,1,-23,-35,7,29, 9,3,-5,23,-12,16,-8,2,-31,12,-22,47,-27,7,26,1,-1,-86,-59,-62,-16,-34,-4,-9,-127,-4,-7,11,34,11, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 20,1,3,30 } };
const TfArray<20, float> quant14_scale = { 20, { 0.012933406978845596, 0.014865080825984478, 0.0067833703942596912, 0.01097483653575182, 0.0095719480887055397, 0.01342356950044632, 0.0098111387342214584, 0.01228758879005909, 0.014225424267351627, 0.015777347609400749, 0.0097762551158666611, 0.0097883604466915131, 0.011666690930724144, 0.0092770727351307869, 0.0093693491071462631, 0.01372813992202282, 0.012668406590819359, 0.010531424544751644, 0.011768490076065063, 0.013146334327757359, } };
const TfArray<20, int> quant14_zero = { 20, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension15 = { 1, { 16 } };
const TfArray<16, float> quant15_scale = { 16, { 0.013798879459500313, 0.0085203973576426506, 0.0085449954494833946, 0.0088390018790960312, 0.0062430575489997864, 0.0096372552216053009, 0.0079057523980736732, 0.0055701779201626778, 0.0097255818545818329, 0.008364945650100708, 0.0069449814036488533, 0.0087566301226615906, 0.0075511396862566471, 0.014669205062091351, 0.010229427367448807, 0.01105487160384655, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int8_t tensor_data16[16*1*3*20] = { 
  /* [0][0][][] */ 12,-55,12,-8,0,3,-10,-15,-70,-45,39,1,5,2,-9,-19,12,-70,-5,-22, -9,-53,7,-68,-36,-15,10,-75,-80,-34,25,-7,9,-26,-5,-127,-16,-66,-2,-15, -27,-90,-34,-31,-59,1,-4,-90,-99,-43,-26,20,-27,-3,11,-33,-9,-19,13,5, 
  /* [1][0][][] */ -97,18,-110,-4,45,-49,3,1,-2,23,-37,-51,-29,-29,-29,-25,-43,13,24,-85, -53,5,-61,-14,17,22,16,-11,-16,-22,8,-127,-52,32,-60,-5,-51,-14,16,-88, -6,-10,11,-67,32,-40,31,-66,-13,-46,26,-47,-13,41,-43,-64,4,0,-33,-36, 
  /* [2][0][][] */ -54,27,-49,9,-24,-34,63,6,10,1,7,-33,-60,-19,-73,-21,-37,-7,5,-46, -83,-8,-74,-8,29,-39,-31,-4,-4,-13,-82,-47,-9,-9,-127,-29,-41,-14,10,-78, -48,-13,-24,-37,6,-8,63,11,9,-23,-30,-88,-7,27,-40,-4,-14,19,-75,-18, 
  /* [3][0][][] */ 24,-79,35,-63,-2,-15,-29,-45,-38,-38,-7,3,21,-8,7,-28,19,-59,-22,-29, 18,-48,-22,-51,-13,7,-13,-34,-91,-25,15,-5,17,-6,-22,-127,11,-107,-12,-46, 12,-63,22,-77,-4,2,6,-98,-120,-51,10,38,21,3,-17,-110,-61,-46,-29,-10, 
  /* [4][0][][] */ -50,-79,30,20,-8,13,-7,-68,-19,-66,-95,-86,78,12,-29,46,20,-13,-97,-24, 12,-70,-3,10,-37,31,-36,-2,-35,5,-21,-127,-39,16,-22,13,41,-52,-30,-60, -100,-19,-24,46,5,3,5,31,-11,9,-82,-105,71,1,-35,9,-15,-64,-4,-76, 
  /* [5][0][][] */ 31,-127,14,-8,13,-19,-33,-49,-55,-96,17,13,-25,-12,-37,-52,35,-90,-5,-27, 8,-26,-5,-39,-18,-17,-35,-46,-112,-28,11,8,-9,4,-34,-80,-4,-81,-5,-43, -29,-46,-1,-82,-64,-33,-17,-79,-127,-29,32,45,-18,-5,11,-40,27,-58,-48,1, 
  /* [6][0][][] */ -20,3,-49,2,20,-14,-23,3,0,18,-12,-5,-9,39,-59,6,-68,16,19,-25, -67,-31,-20,-10,40,-17,-5,-67,5,-8,-93,-54,-5,29,-127,-31,4,9,15,-19, -110,-12,-67,-29,-80,-23,54,-25,-55,-10,24,-116,-40,-6,-97,-61,-58,-91,10,-75, 
  /* [7][0][][] */ 13,0,-50,-87,9,-62,-38,-53,-48,-115,-30,-18,-59,-39,62,-2,-12,-65,15,9, 23,17,-3,-127,11,-74,-56,-45,-33,-78,-47,13,-80,-31,-20,25,-73,-70,-48,1, 69,4,-21,-7,-23,-32,-29,38,-53,-97,4,15,-64,-60,80,41,-24,-91,-27,7, 
  /* [8][0][][] */ -23,0,-111,0,-6,-38,-31,-23,19,16,-64,-24,-50,-27,5,-12,-82,20,-18,-7, -28,0,-45,-13,-51,-25,-19,7,-8,9,-127,-60,-8,-11,-25,-5,-98,5,31,-21, -52,23,-35,20,-20,-20,-6,17,29,10,-11,25,-41,10,-45,26,-37,5,11,-30, 
  /* [9][0][][] */ -15,22,-98,-1,-22,-48,63,-7,19,16,-15,-30,-59,-69,-76,5,-86,0,23,-35, -91,2,-68,8,18,-44,-25,-4,-41,-14,-14,-29,-35,39,-35,-13,-66,-32,6,-124, -8,-31,-62,-35,24,-4,50,-7,-41,-65,-48,-95,25,22,-12,-34,-29,18,-60,-127, 
  /* [10][0][][] */ -39,-58,18,43,-47,94,-17,-81,-46,-103,-13,-4,1,41,-8,13,13,-44,-127,-35, -95,-40,-11,1,0,-38,-2,44,-22,0,-32,-56,61,-4,-37,33,1,-88,-95,-55, 3,-20,9,46,9,59,21,18,6,20,-87,-92,-16,18,4,-12,32,-32,-11,-32, 
  /* [11][0][][] */ -26,26,-127,3,-35,-39,-48,12,11,30,-101,-25,-61,-51,-43,5,-39,-3,23,-49, -50,18,-47,-2,-70,-18,-37,14,-9,26,23,16,-90,-25,-82,18,-92,-3,26,-48, -68,-3,-34,13,-110,-35,-120,12,-48,15,-11,50,-75,-104,-11,5,-46,-6,-76,10, 
  /* [12][0][][] */ -30,23,-56,9,-85,-37,-67,28,11,29,-86,17,-62,-82,-38,15,-70,12,25,-78, -15,-4,-50,6,-78,-40,-127,-17,-14,30,-31,14,-60,-65,-3,-12,-69,-23,-5,-1, -31,-44,-18,-11,-116,-19,-94,8,-32,34,14,49,17,-110,-2,4,-20,25,-52,17, 
  /* [13][0][][] */ 6,-53,4,-13,7,2,1,-16,-11,-26,6,-4,2,-2,-8,-18,12,-30,-13,-42, 0,-43,16,-35,-12,6,-18,-39,-12,-43,6,2,-11,6,-1,-69,-1,-3,-18,-19, -30,-20,-37,-66,-47,0,-42,-127,-3,-38,13,16,0,2,-4,-74,-24,-5,-35,12, 
  /* [14][0][][] */ -20,-74,-4,26,-32,36,-13,-22,-92,-22,-20,-39,29,11,-32,-52,27,-109,-32,-96, -50,-25,-11,2,-1,25,2,23,-17,13,-34,-53,5,-19,-49,21,4,-69,-32,-70, -11,4,2,40,5,21,4,-2,11,10,-44,-127,37,11,11,10,20,-21,-29,-8, 
  /* [15][0][][] */ 27,-91,33,-15,-5,1,-43,-27,-49,-43,25,21,4,17,-25,-66,12,-67,7,-2, -18,-5,17,-26,-22,-12,18,-65,-65,-37,-21,-8,-17,-19,-18,-75,-9,-42,-13,-16, -21,-87,-33,-54,-63,12,-50,-84,-127,-80,28,29,-41,-60,17,-38,-24,-111,-4,-4, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,1,3,20 } };
const TfArray<16, float> quant16_scale = { 16, { 0.017591826617717743, 0.01086242962628603, 0.010893789120018482, 0.011268610134720802, 0.0079591087996959686, 0.01228628121316433, 0.010078834369778633, 0.0071012726984918118, 0.012398886494338512, 0.010664247907698154, 0.008853972889482975, 0.01116359606385231, 0.0096267480403184891, 0.018701381981372833, 0.01304122619330883, 0.014093563891947269, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int32_t tensor_data17[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension17 = { 1, { 8 } };
const TfArray<8, float> quant17_scale = { 8, { 0.0080268001183867455, 0.0038636173121631145, 0.0062190736643970013, 0.0049611520953476429, 0.0077620712108910084, 0.0069475728087127209, 0.0063272193074226379, 0.0031905306968837976, } };
const TfArray<8, int> quant17_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int8_t tensor_data18[8*1*3*16] = { 
  /* [0][0][][] */ -52,27,12,-24,9,-34,21,-59,-4,7,14,-15,-27,-10,9,-127, -68,-17,22,-22,17,2,-3,-23,-7,0,-3,-9,-4,-11,1,-58, -13,27,0,-12,23,-35,29,-14,-3,29,4,-62,-36,-3,27,-45, 
  /* [1][0][][] */ -27,16,25,-79,-79,-108,-4,1,58,51,-37,53,23,0,-127,-64, -110,14,-26,-46,-79,44,5,-61,50,-30,-106,-26,27,14,-108,-40, -35,35,15,-18,-75,-15,87,-19,-2,19,-27,26,4,72,-41,51, 
  /* [2][0][][] */ 32,-83,-72,17,-28,33,-42,-1,-62,-69,-13,-117,-100,14,-35,22, 19,-7,-19,32,14,-24,-127,-12,-127,-11,17,-42,-17,5,11,15, 26,-12,-29,0,4,-6,-24,-4,-52,-21,1,-96,-20,-5,-6,13, 
  /* [3][0][][] */ -127,-25,-34,-22,-23,-93,11,-35,9,-66,-10,42,53,-38,-26,-61, -97,-13,-6,-65,-55,-114,-37,-82,16,-25,-42,5,6,-30,-53,-72, -68,-37,17,-21,-3,-36,-9,-55,31,-26,6,12,23,-28,-46,-10, 
  /* [4][0][][] */ 47,-100,-127,-7,-68,3,-25,16,-31,-33,-45,2,12,-18,-86,21, 14,-50,-104,-7,-63,-3,-41,12,-19,-95,-29,-33,-84,1,-7,37, -3,-111,-31,9,-60,14,-18,28,-34,-64,-67,-38,-46,21,-57,-1, 
  /* [5][0][][] */ 0,7,-3,19,9,3,-7,-37,-54,-13,22,-127,-40,4,27,24, -9,-36,-42,-5,31,24,-10,14,-57,-9,-4,7,-3,-24,14,-37, -1,-2,0,-1,3,16,0,-4,-30,-29,22,-5,-11,5,20,2, 
  /* [6][0][][] */ -64,-12,-18,-65,38,-51,-18,-37,12,-43,17,5,25,-73,45,-127, -82,-6,-23,10,5,-61,15,-72,-18,-52,50,18,-4,-73,-11,-77, -90,-42,-13,-51,-5,-59,-3,-16,-12,0,-18,-55,21,-89,29,14, 
  /* [7][0][][] */ 30,46,44,89,-17,50,-8,-14,-9,-21,-95,-41,-67,65,-127,0, 93,14,28,4,-57,-44,-19,-40,-3,42,-42,-9,-62,63,-57,3, 63,17,36,-7,-39,72,66,-25,-6,56,-55,-96,-117,67,-54,12, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,3,16 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0087148509919643402, 0.0041948035359382629, 0.0067521678283810616, 0.0053864181973040104, 0.0084274299442768097, 0.0075431130826473236, 0.0068695833906531334, 0.0034640203230082989, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int32_t tensor_data19[4] = { 1, 1, 49, 13, };
const TfArray<1, int> tensor_dimension19 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data20[3] = { 1, 49, 50, };
const TfArray<1, int> tensor_dimension20 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data21[4] = { 1, 49, 1, 50, };
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data22[4] = { 1, 1, 25, 50, };
const TfArray<1, int> tensor_dimension22 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data23[3] = { 1, 25, 30, };
const TfArray<1, int> tensor_dimension23 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data24[4] = { 1, 25, 1, 30, };
const TfArray<1, int> tensor_dimension24 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data25[4] = { 1, 1, 13, 30, };
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data26[3] = { 1, 13, 20, };
const TfArray<1, int> tensor_dimension26 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data27[4] = { 1, 13, 1, 20, };
const TfArray<1, int> tensor_dimension27 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data28[4] = { 1, 1, 7, 20, };
const TfArray<1, int> tensor_dimension28 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data29[3] = { 1, 7, 16, };
const TfArray<1, int> tensor_dimension29 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data30[4] = { 1, 7, 1, 16, };
const TfArray<1, int> tensor_dimension30 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data31[4] = { 1, 1, 4, 16, };
const TfArray<1, int> tensor_dimension31 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data32[3] = { 1, 4, 8, };
const TfArray<1, int> tensor_dimension32 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data33[4] = { 1, 4, 1, 8, };
const TfArray<1, int> tensor_dimension33 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,1,49,13 } };
const TfArray<1, float> quant34_scale = { 1, { 0.045173682272434235, } };
const TfArray<1, int> quant34_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,1,49,50 } };
const TfArray<1, float> quant35_scale = { 1, { 0.18743427097797394, } };
const TfArray<1, int> quant35_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<3, int> tensor_dimension36 = { 3, { 1,49,50 } };
const TfArray<1, float> quant36_scale = { 1, { 0.18743427097797394, } };
const TfArray<1, int> quant36_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<3, int> tensor_dimension37 = { 3, { 1,49,50 } };
const TfArray<1, float> quant37_scale = { 1, { 0.089909061789512634, } };
const TfArray<1, int> quant37_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,49,1,50 } };
const TfArray<1, float> quant38_scale = { 1, { 0.089909061789512634, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<4, int> tensor_dimension39 = { 4, { 1,25,1,50 } };
const TfArray<1, float> quant39_scale = { 1, { 0.089909061789512634, } };
const TfArray<1, int> quant39_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,1,25,50 } };
const TfArray<1, float> quant40_scale = { 1, { 0.089909061789512634, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,1,25,30 } };
const TfArray<1, float> quant41_scale = { 1, { 1.344527006149292, } };
const TfArray<1, int> quant41_zero = { 1, { 80 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfArray<3, int> tensor_dimension42 = { 3, { 1,25,30 } };
const TfArray<1, float> quant42_scale = { 1, { 1.344527006149292, } };
const TfArray<1, int> quant42_zero = { 1, { 80 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const TfArray<3, int> tensor_dimension43 = { 3, { 1,25,30 } };
const TfArray<1, float> quant43_scale = { 1, { 0.24293144047260284, } };
const TfArray<1, int> quant43_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,25,1,30 } };
const TfArray<1, float> quant44_scale = { 1, { 0.24293144047260284, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,13,1,30 } };
const TfArray<1, float> quant45_scale = { 1, { 0.24293144047260284, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,1,13,30 } };
const TfArray<1, float> quant46_scale = { 1, { 0.24293144047260284, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,1,13,20 } };
const TfArray<1, float> quant47_scale = { 1, { 2.1548042297363281, } };
const TfArray<1, int> quant47_zero = { 1, { 34 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<3, int> tensor_dimension48 = { 3, { 1,13,20 } };
const TfArray<1, float> quant48_scale = { 1, { 2.1548042297363281, } };
const TfArray<1, int> quant48_zero = { 1, { 34 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<3, int> tensor_dimension49 = { 3, { 1,13,20 } };
const TfArray<1, float> quant49_scale = { 1, { 0.78439152240753174, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,13,1,20 } };
const TfArray<1, float> quant50_scale = { 1, { 0.78439152240753174, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,7,1,20 } };
const TfArray<1, float> quant51_scale = { 1, { 0.78439152240753174, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,1,7,20 } };
const TfArray<1, float> quant52_scale = { 1, { 0.78439152240753174, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,1,7,16 } };
const TfArray<1, float> quant53_scale = { 1, { 4.7312164306640625, } };
const TfArray<1, int> quant53_zero = { 1, { 77 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<3, int> tensor_dimension54 = { 3, { 1,7,16 } };
const TfArray<1, float> quant54_scale = { 1, { 4.7312164306640625, } };
const TfArray<1, int> quant54_zero = { 1, { 77 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<3, int> tensor_dimension55 = { 3, { 1,7,16 } };
const TfArray<1, float> quant55_scale = { 1, { 0.92104846239089966, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,7,1,16 } };
const TfArray<1, float> quant56_scale = { 1, { 0.92104846239089966, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,4,1,16 } };
const TfArray<1, float> quant57_scale = { 1, { 0.92104846239089966, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,1,4,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.92104846239089966, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,1,4,8 } };
const TfArray<1, float> quant59_scale = { 1, { 3.1551508903503418, } };
const TfArray<1, int> quant59_zero = { 1, { 71 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<3, int> tensor_dimension60 = { 3, { 1,4,8 } };
const TfArray<1, float> quant60_scale = { 1, { 3.1551508903503418, } };
const TfArray<1, int> quant60_zero = { 1, { 71 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<3, int> tensor_dimension61 = { 3, { 1,4,8 } };
const TfArray<1, float> quant61_scale = { 1, { 0.69187003374099731, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,4,1,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.69187003374099731, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,2,1,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.69187003374099731, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<2, int> tensor_dimension64 = { 2, { 1,16 } };
const TfArray<1, float> quant64_scale = { 1, { 0.69187003374099731, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<2, int> tensor_dimension65 = { 2, { 1,5 } };
const TfArray<1, float> quant65_scale = { 1, { 1.0556372404098511, } };
const TfArray<1, int> quant65_zero = { 1, { -82 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<2, int> tensor_dimension66 = { 2, { 1,5 } };
const TfArray<1, float> quant66_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,19 } };
const TfArray<1, int> outputs0 = { 1, { 34 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 34,10,9 } };
const TfArray<1, int> outputs1 = { 1, { 35 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 35,20 } };
const TfArray<1, int> outputs2 = { 1, { 36 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 36,2 } };
const TfArray<1, int> outputs3 = { 1, { 37 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 37,21 } };
const TfArray<1, int> outputs4 = { 1, { 38 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 38 } };
const TfArray<1, int> outputs5 = { 1, { 39 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 39,22 } };
const TfArray<1, int> outputs6 = { 1, { 40 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 40,12,11 } };
const TfArray<1, int> outputs7 = { 1, { 41 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 41,23 } };
const TfArray<1, int> outputs8 = { 1, { 42 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 42,4 } };
const TfArray<1, int> outputs9 = { 1, { 43 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 43,24 } };
const TfArray<1, int> outputs10 = { 1, { 44 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 44 } };
const TfArray<1, int> outputs11 = { 1, { 45 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 45,25 } };
const TfArray<1, int> outputs12 = { 1, { 46 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 46,14,13 } };
const TfArray<1, int> outputs13 = { 1, { 47 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 47,26 } };
const TfArray<1, int> outputs14 = { 1, { 48 } };
const TfLiteAddParams opdata15 = { kTfLiteActRelu };
const TfArray<2, int> inputs15 = { 2, { 48,5 } };
const TfArray<1, int> outputs15 = { 1, { 49 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 49,27 } };
const TfArray<1, int> outputs16 = { 1, { 50 } };
const TfLitePoolParams opdata17 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs17 = { 1, { 50 } };
const TfArray<1, int> outputs17 = { 1, { 51 } };
const TfLiteReshapeParams opdata18 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs18 = { 2, { 51,28 } };
const TfArray<1, int> outputs18 = { 1, { 52 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 52,16,15 } };
const TfArray<1, int> outputs19 = { 1, { 53 } };
const TfLiteReshapeParams opdata20 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs20 = { 2, { 53,29 } };
const TfArray<1, int> outputs20 = { 1, { 54 } };
const TfLiteAddParams opdata21 = { kTfLiteActRelu };
const TfArray<2, int> inputs21 = { 2, { 54,6 } };
const TfArray<1, int> outputs21 = { 1, { 55 } };
const TfLiteReshapeParams opdata22 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs22 = { 2, { 55,30 } };
const TfArray<1, int> outputs22 = { 1, { 56 } };
const TfLitePoolParams opdata23 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs23 = { 1, { 56 } };
const TfArray<1, int> outputs23 = { 1, { 57 } };
const TfLiteReshapeParams opdata24 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs24 = { 2, { 57,31 } };
const TfArray<1, int> outputs24 = { 1, { 58 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 58,18,17 } };
const TfArray<1, int> outputs25 = { 1, { 59 } };
const TfLiteReshapeParams opdata26 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs26 = { 2, { 59,32 } };
const TfArray<1, int> outputs26 = { 1, { 60 } };
const TfLiteAddParams opdata27 = { kTfLiteActRelu };
const TfArray<2, int> inputs27 = { 2, { 60,7 } };
const TfArray<1, int> outputs27 = { 1, { 61 } };
const TfLiteReshapeParams opdata28 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs28 = { 2, { 61,33 } };
const TfArray<1, int> outputs28 = { 1, { 62 } };
const TfLitePoolParams opdata29 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs29 = { 1, { 62 } };
const TfArray<1, int> outputs29 = { 1, { 63 } };
const TfLiteReshapeParams opdata30 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs30 = { 2, { 63,1 } };
const TfArray<1, int> outputs30 = { 1, { 64 } };
const TfLiteFullyConnectedParams opdata31 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs31 = { 3, { 64,8,3 } };
const TfArray<1, int> outputs31 = { 1, { 65 } };
const TfLiteSoftmaxParams opdata32 = { 1 };
const TfArray<1, int> inputs32 = { 1, { 65 } };
const TfArray<1, int> outputs32 = { 1, { 66 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 4500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension34, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2464, (TfLiteIntArray*)&tensor_dimension35, 2450, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 2450, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2464, (TfLiteIntArray*)&tensor_dimension37, 2450, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension38, 2450, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2464, (TfLiteIntArray*)&tensor_dimension39, 1250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension40, 1250, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1264, (TfLiteIntArray*)&tensor_dimension41, 750, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension42, 750, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 752, (TfLiteIntArray*)&tensor_dimension43, 750, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension44, 750, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 752, (TfLiteIntArray*)&tensor_dimension45, 390, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension46, 390, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension47, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 272, (TfLiteIntArray*)&tensor_dimension49, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension50, 260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 272, (TfLiteIntArray*)&tensor_dimension51, 140, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 140, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension53, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension55, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension57, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension58, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension59, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension61, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension62, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension63, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension65, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension66, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_ADD, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_ADD, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_ADD, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 67;
  for(size_t i = 0; i < 67; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    #if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    #if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 33; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 33; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  66, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 33; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
